generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String
  cpf       String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userType  Int
  Address   Address[]
  Cart      Cart[]
  Order     Order[]
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  sigla     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  City      City[]
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  state_id  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Address   Address[]
  state     State     @relation(fields: [state_id], references: [id])
}

model Address {
  user_id    Int
  complement String?
  number     Int
  cep        String
  city_id    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         Int      @id @default(autoincrement())
  city       City     @relation(fields: [city_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
  Order      Order[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id           Int            @id @default(autoincrement())
  category_id  Int
  name         String
  price        Float
  image        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CartProduct  CartProduct[]
  category     Category       @relation(fields: [category_id], references: [id])
  OrderProduct OrderProduct[]
}

model Cart {
  id          Int           @id @default(autoincrement())
  user_id     Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  active      Boolean
  user        User          @relation(fields: [user_id], references: [id])
  CartProduct CartProduct[]
}

model CartProduct {
  id         Int      @id @default(autoincrement())
  cart_id    Int
  product_id Int
  amount     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cart       Cart     @relation(fields: [cart_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
}

model PaymentStatus {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
}

model Payment {
  id              Int           @id @default(autoincrement())
  status_id       Int
  price           Float
  discount        Int
  final_price     Float
  type            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  code            Int
  payment_date    DateTime
  amount_payments Int
  payment_status  PaymentStatus @relation(fields: [status_id], references: [id])
  Order           Order[]
}

model Order {
  id           Int            @id @default(autoincrement())
  user_id      Int
  address_id   Int
  date         DateTime
  payment_id   Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [user_id], references: [id])
  address      Address        @relation(fields: [address_id], references: [id])
  payment      Payment        @relation(fields: [payment_id], references: [id])
  OrderProduct OrderProduct[]
}

model OrderProduct {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  amount     Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [order_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
}
