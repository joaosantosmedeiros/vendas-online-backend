// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String
  cpf       String
  password  String
  userType  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Address   Address[]
  Cart      Cart[]
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  sigla     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  City      City[]
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  state     State     @relation(fields: [state_id], references: [id])
  state_id  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Address   Address[]
}

model Address {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  complement String?
  number     Int
  cep        String
  city_id    Int
  city       City     @relation(fields: [city_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  category_id Int
  category    Category      @relation(fields: [category_id], references: [id])
  name        String
  price       Float
  image       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CartProduct CartProduct[]
}

model Cart {
  id          Int           @id @default(autoincrement())
  user_id     Int
  user        User          @relation(fields: [user_id], references: [id])
  active      Boolean
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CartProduct CartProduct[]
}

model CartProduct {
  id         Int      @id @default(autoincrement())
  cart_id    Int
  cart       Cart     @relation(fields: [cart_id], references: [id])
  product_id Int
  product    Product  @relation(fields: [product_id], references: [id])
  amount     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PaymentStatus {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
}

model Payment {
  id              Int           @id @default(autoincrement())
  status_id       Int
  payment_status  PaymentStatus @relation(fields: [status_id], references: [id])
  price           Float
  discount        Int
  final_price     Float
  type            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  code            Int?
  payment_date    DateTime?
  amount_payments Int?
}
